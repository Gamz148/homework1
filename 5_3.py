# 3. Есть два списка: tutors - имена учеников, groups - названия их классов.
# Необходимо реализовать генератор или функцию-генератор, возвращающий кортежи вида '(<tutor>, <group>)'.
#
# Техническое задание
# Функция (или генератор) должна работать со списками любой длины.
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке groups меньше элементов, чем в списке tutors,
# необходимо вывести последние кортежи в виде: '(<tutor>, None)', например: '('Станислав', None)'
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Генератор возвращает кортежи указанного вида.
# Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# Не используйте в этом задании функции zip и zip_longest.
# Не меняйте исходные списки tutors и groups и не создавайте новых списков.
# Подтвердите работоспособность(выведите в консоль результаты)
# для обоих вариантов: groups меньше tutors и tutors меньше groups.

tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей','Дмитрий', 'Борис', 'Елена']
groups = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

# gen_1 = [gen[el][num] for el in tutors for num in groups]
# gen = [i for i in tutors]
#     yeld i
# print(type(gen))

print("\nИспользование генераторного выражения\n")
g = ((tutors[i], groups[i] if i < len(groups)else None) for i in range(len(tutors)))

for el in g:
    print(el)